import{_ as i,c as a,o as t,ae as l}from"./chunks/framework.DO_qJNgM.js";const h="/his-note/assets/image51.Dwyc2AzY.png",e="/his-note/assets/image52.CMimgbwu.png",n="/his-note/assets/image53.44WKbjBI.png",p="/his-note/assets/image54.BPkffjg5.png",k="/his-note/assets/image55.HpKhakNz.png",r="/his-note/assets/image56.CIAnDvz9.png",F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"java/demo1.md","filePath":"java/demo1.md"}'),d={name:"java/demo1.md"};function o(E,s,c,g,y,b){return t(),a("div",null,s[0]||(s[0]=[l('<h2 id="jdk下载位置" tabindex="-1">JDK下载位置 <a class="header-anchor" href="#jdk下载位置" aria-label="Permalink to &quot;JDK下载位置&quot;">​</a></h2><blockquote><p>www.oracle.com/technetwork/java/javase/downloads/index.html</p></blockquote><br><h2 id="jdea下载位置" tabindex="-1">JDEA下载位置 <a class="header-anchor" href="#jdea下载位置" aria-label="Permalink to &quot;JDEA下载位置&quot;">​</a></h2><blockquote><p><a href="https://www.jetbrains.com/" target="_blank" rel="noreferrer">https://www.jetbrains.com/</a></p></blockquote><br><br><h2 id="mysql下载位置" tabindex="-1">Mysql下载位置 <a class="header-anchor" href="#mysql下载位置" aria-label="Permalink to &quot;Mysql下载位置&quot;">​</a></h2><blockquote><p><a href="https://dev.mysql.com/downloads/windows/installer/" target="_blank" rel="noreferrer">https://dev.mysql.com/downloads/windows/installer/</a></p></blockquote><h2 id="快捷键" tabindex="-1">快捷键 <a class="header-anchor" href="#快捷键" aria-label="Permalink to &quot;快捷键&quot;">​</a></h2><ol><li><code>psvm + 回车</code>：快速引入main方法</li><li><code>sout + 回车</code>：快速打印输出语句</li><li><code>Ctrl + D</code>：复制当前光标所在行到下一行（IDEA中）</li><li><code>Ctrl + Y</code>：删除光标所在行（IDEA中）</li><li><code>/* + 回车</code>：多行注释</li><li><code>/** + 回车</code> | <code>Ctrl + Shift + /</code>：多行注释</li><li>一般要注意两点：（1）字体大小；（2）区分大小写</li><li>Java中变量不可以重复定义</li><li>变量本质上就是一个&quot;可操作的存储空间&quot;。空间位置是确定的，但放置什么值不确定。Java是一种强类型语言，每个变量都必须声明其数据类型。</li><li>平展数据包： <img src="'+h+`" alt=""></li><li><code>public static</code>：方法的修饰符</li><li><code>Ctrl + 鼠标点击方法</code>：查明方法是在哪编写的</li><li><code>Alt + Insert</code>：打开构造器</li><li><code>break</code>：结束当前的循环，可在if语句中使用</li><li><code>Alt + Enter</code>：自动添加局部变量</li><li><code>Win + E</code>：调出子电脑</li></ol><br><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><p>Java的数据类型可分为两大类：基本数据类型和引用数据类型。基本数据类型又分为数值型（byte、short、int、long）、字符型（char）、布尔型（boolean）。引用数据类型又分为类（class）、接口（interface）、数组。</p><br><h2 id="流程控制语句" tabindex="-1">流程控制语句 <a class="header-anchor" href="#流程控制语句" aria-label="Permalink to &quot;流程控制语句&quot;">​</a></h2><p>流程控制语句是用来控制程序中各语句执行顺序的语句：顺序、分支、循环。分支结构分为if分支（单分支、双分支、多分支）、switch分支（不常用）。循环结构分为while循环、for循环、do-while循环（不常用）。</p><br><h2 id="形参、实参" tabindex="-1">形参、实参 <a class="header-anchor" href="#形参、实参" aria-label="Permalink to &quot;形参、实参&quot;">​</a></h2><p>形式参数：在方法声明时用于接收外界传入的数据<br> 实际参数：调用方法时实际传给方法的参数</p><br><h2 id="方法的重载" tabindex="-1">方法的重载 <a class="header-anchor" href="#方法的重载" aria-label="Permalink to &quot;方法的重载&quot;">​</a></h2><p>在同一个类中，方法名相同，形参列表不同的多个方法，构成了方法的重载。判断方法是否重载不看方法的修饰符、返回类型。方法重载必须要求方法名相同、形参必须不同（类型不同、顺序不同、个数不同）。</p><br><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><p>数组是相同类型数据的有序集合，每一个数据称作一个元素，每个元素可以通过一个索引（下标）来访问它们。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><p>遍历数组：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[i]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>或者：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><br><p>数组的缺点：<br> （1）数组一旦指定了长度，那么长度就确定了，不可以更改；<br> （2）删除、增加元素效率低，因为当前要插入/删除的位置后面的元素都要依次向前挪动。<br> （3）<strong>数组中实际元素的数量是没有办法获取的，因为没有提供对应的方法或属性来获取。</strong><br> （4）数组存储：有序、可重复，对于某些场景不适用。</p><br><h2 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h2><p>类名首字母大写，遵循驼峰命名原则。<br> 特性-属性，行为-方法</p><br><h2 id="构造器" tabindex="-1">构造器 <a class="header-anchor" href="#构造器" aria-label="Permalink to &quot;构造器&quot;">​</a></h2><p>对于一个类来说，一般有三种常见的成员：属性（名词）、方法（动词）、构造器。构造方法也叫构造器，是一个类创建对象时被<strong>自动调用</strong>的特殊方法，用于<strong>对象的初始化</strong>。</p><blockquote><p>Java通过new关键字来调用构造器，从而返回该类的实例</p></blockquote><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Person p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>上述：<code>Person()</code>是一个空构造方法<br> new关键字对方法进行调用<br> 构造器作用：底层帮我们创建对象，在创建对象化以后进行初始化操作<br> 如果一个类没有显式编写构造器的话，那么系统会为这个类默认分配一个空构造器。 <br></p><p>构造器的声明方法：没有返回值类型；方法名、构造器名、类名必须一样。</p><br><h2 id="封装" tabindex="-1">封装 <a class="header-anchor" href="#封装" aria-label="Permalink to &quot;封装&quot;">​</a></h2><p>思想：高内聚，低耦合：<br> 高内聚：类的内部数据操作细节自己完成，不允许外部干涉； 低耦合：仅对外暴露少量的方法用于使用。<br> 隐藏对象内部的复杂性，只对外开放简单的接口。</p><br><h2 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h2><p>子类 extends 父类<br> 好处：提高代码复用性；便于代码扩展；多态使用的前提。</p><br><h2 id="重写" tabindex="-1">重写 <a class="header-anchor" href="#重写" aria-label="Permalink to &quot;重写&quot;">​</a></h2><p>重写必须有子类跟父类，子类中重写的方法的方法名和形参列表必须和父类中的方法一样。</p><br><h2 id="多态" tabindex="-1">多态 <a class="header-anchor" href="#多态" aria-label="Permalink to &quot;多态&quot;">​</a></h2><p>即同一种行为，不同的子类呈现出来的状态是不同的。多态跟属性无关，多态指的是方法的多态，而不是属性的多态。</p><br><h2 id="异常" tabindex="-1">异常 <a class="header-anchor" href="#异常" aria-label="Permalink to &quot;异常&quot;">​</a></h2><p>对于你预知可能出现错误的代码，放入try中，如果出现了问题，会将异常封装成一个对象，然后用一个值来接收这个对象。如果try中出现异常，则执行catch中的语句，接着执行catch之后的语句；如果发生异常但并没有被捕获到，则catch中的语句不会执行，程序报错，catch后的语句也不会被执行；这时有finally关键字，无论发生异常有没有被捕捉到，均会执行finally中的代码。throw在类中使用人为制造异常，throws在方法声明时使用。</p><br><h2 id="集合" tabindex="-1">集合 <a class="header-anchor" href="#集合" aria-label="Permalink to &quot;集合&quot;">​</a></h2><p>定义一个集合：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ArrayList list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aaa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//增加元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bbb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ccc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ddd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//删除元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bbb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eee&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//修改元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;list.get(i)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><br><h2 id="file类" tabindex="-1">File类 <a class="header-anchor" href="#file类" aria-label="Permalink to &quot;File类&quot;">​</a></h2><p>File类对象可封装要操作的文件，可通过File类的对象对文件进行操作，如查看文件的大小、判断文件是否隐藏、判断文件是否可读等。<br> 但是File类并不涉及文件内容的操作，单靠File类对象无法实现，这时需要借助I/O流完成。 <img src="`+e+'" alt=""></p><br><h2 id="线程" tabindex="-1">线程 <a class="header-anchor" href="#线程" aria-label="Permalink to &quot;线程&quot;">​</a></h2><p>如果进程只有一条执行路径的话，那就是单线程；如果进程中有多条执行路径，则是多线程。</p><blockquote><p>进程是操作系统进行资源分配的基本单位<br> 线程是操作系统调度执行的基本单位 <br></p></blockquote><p>创建线程有三种方式：<br> （1）继承Thread类；<br> （2）实现Runnable接口；<br> （3）实现Callable接口。</p><br><p><img src="'+n+'" alt=""></p><br><h2 id="xml" tabindex="-1">XML <a class="header-anchor" href="#xml" aria-label="Permalink to &quot;XML&quot;">​</a></h2><p>文件首部必须加上：</p><div class="language-XML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">XML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;?</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">xml</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ?&gt;</span></span></code></pre></div><p>有且只有一个根标签</p><br><blockquote><p>框架 = 注解 + 反射 + 设计模式</p></blockquote><br><h2 id="mysql" tabindex="-1">Mysql <a class="header-anchor" href="#mysql" aria-label="Permalink to &quot;Mysql&quot;">​</a></h2><p>优点：Mysql数据库体积小、速度快、成本低、跨平台、开放源码... <img src="'+p+'" alt=""></p><br><h2 id="jdbc" tabindex="-1">JDBC <a class="header-anchor" href="#jdbc" aria-label="Permalink to &quot;JDBC&quot;">​</a></h2><p><img src="'+k+'" alt=""></p><blockquote><p>MySQL数据库厂商对JDBC规范的实现就叫做MySQL驱动 <br></p></blockquote><p>JDBC(Java DataBase Connectivity-Java数据库连接)，是SUN公司定义的一套接口（规范） <br></p><p>想要使用JDBC，就要在程序中导入驱动包： <img src="'+r+'" alt=""></p>',88)]))}const m=i(d,[["render",o]]);export{F as __pageData,m as default};
