import{_ as i,c as a,o as n,ae as e}from"./chunks/framework.DO_qJNgM.js";const p="/his-note/assets/3.BHeR2_Ac.jpg",E=JSON.parse('{"title":"@bean","description":"","frontmatter":{},"headers":[],"relativePath":"springboot/at-bean.md","filePath":"springboot/at-bean.md"}'),l={name:"springboot/at-bean.md"};function t(h,s,k,d,r,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="bean" tabindex="-1">@bean <a class="header-anchor" href="#bean" aria-label="Permalink to &quot;@bean&quot;">​</a></h1><p><strong>实例：</strong> <code>import org.springframework.context.annotation.Bean;</code><br><strong>作用：</strong> 导入Bean注解所在的包</p><ul><li>Bean 注解是Spring框架中用来定义bean的，而bean是由Spring容器管理的对象。</li><li>举一个例子，比如在一个配置类中使用<code>@bean</code>注解来定义一个bean，这样Spring容器就能在运行时创建和管理这个bean的实例。例如，定义一个数据源的bean，或者一个服务的bean，需要说明<code>@Bean</code>通常用在<code>@Configuration</code>注解的类中，或者用在<code>@SpringBootApplication</code>注解的主类中。<code>@Configuration</code>通常用于类级别，自动扫描并注册为bean，而<code>@bean</code>用于方法级别，返回一个对象实例，由Spring管理。</li><li>需要注意的是，当使用<code>@bean</code>时，方法名默认作为bean的名称，也可以通过name属性指定别名。同时结合其他注解如<code>@Primary</code>、<code>@Qualifier</code>来管理bean的优先级和注入时的选择。</li><li><code>@Bean</code>的使用场景：比如当需要更精细地控制bean的创建过程时，比如第三方库的类无法用<code>@Component</code>注解时，就可以用<code>@Bean</code>来手动配置。</li><li><code>@Bean</code>的相关信息:比如Bean的作用域<code>@Scope</code>、说明周期回调(<code>@PostConstruct</code>、<code>@PreDestroy</code>)。</li></ul><p>综上所述：</p><p><code>@Bean</code>的用途：</p><ul><li>用于定义Spring容器管理的对象（Bean）</li><li>通常标注在方法上，方法的返回值会被Spring注册为一个Bean，供依赖注入使用。</li></ul><p>Spring容器的核心机制：</p><ul><li>Spring通过控制反转（IoC）管理Bean的生命周期。</li><li>开发者通过<code>@Bean</code>显式声明对象，而不是直接new创建对象。</li></ul><p>典型使用场景：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //声明这是一个配置类  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //将该方法的返回值注册为Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataSource </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //创建并返回一个数据源对象（例如连接池）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HikariDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myService&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//指定Bean的名称</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyService </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">myService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyServiceImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//依赖注入已注册的Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>两个注解的不同:</p><ol><li><code>@Bean</code>:</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> A </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li><code>@Component</code>:</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>问：<code>@Bean</code>方法会被多次调用吗？<br> 答：默认单例作用域下，Spring 会缓存方法的返回值，确保多次调用返回同一个实例。</p><p><img src="`+p+'" alt="wang"></p>',17)]))}const g=i(l,[["render",t]]);export{E as __pageData,g as default};
