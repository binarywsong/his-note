import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.DO_qJNgM.js";const c=JSON.parse('{"title":"@Override","description":"","frontmatter":{},"headers":[],"relativePath":"springboot/at-override.md","filePath":"springboot/at-override.md"}'),n={name:"springboot/at-override.md"};function r(p,s,l,d,o,h){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="override" tabindex="-1">@Override <a class="header-anchor" href="#override" aria-label="Permalink to &quot;@Override&quot;">​</a></h1><p>实例：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPermissionList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object loginId, String loginType){</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这是一个方法的重写，使用了<code>@Override</code>，就意味着这个这个方法是从父类或者接口继承而来的。</p>`,4)]))}const g=i(n,[["render",r]]);export{c as __pageData,g as default};
