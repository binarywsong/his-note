import{_ as a,c as o,o as t,ae as l}from"./chunks/framework.DO_qJNgM.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"springboot/demo.md","filePath":"springboot/demo.md"}'),i={name:"springboot/demo.md"};function r(d,e,n,s,c,_){return t(),o("div",null,e[0]||(e[0]=[l('<h2 id="_1" tabindex="-1">@1 <a class="header-anchor" href="#_1" aria-label="Permalink to &quot;@1&quot;">​</a></h2><h3 id="编写持久层代码" tabindex="-1">编写持久层代码： <a class="header-anchor" href="#编写持久层代码" aria-label="Permalink to &quot;编写持久层代码：&quot;">​</a></h3><ul><li>在<code>.xml</code>文件中声明SQL语句</li><li>接口中声明DAO方法</li></ul><h3 id="编写业务层代码" tabindex="-1">编写业务层代码 <a class="header-anchor" href="#编写业务层代码" aria-label="Permalink to &quot;编写业务层代码&quot;">​</a></h3><ul><li>声明抽象方法</li><li><code>Impl.java</code>类中，实现抽象方法</li></ul><h3 id="编写web层代码" tabindex="-1">编写Web层代码 <a class="header-anchor" href="#编写web层代码" aria-label="Permalink to &quot;编写Web层代码&quot;">​</a></h3><ul><li></li><li>声明Web方法</li></ul>',7)]))}const u=a(i,[["render",r]]);export{m as __pageData,u as default};
